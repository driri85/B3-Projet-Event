name: CI/CD Elastic Beanstalk

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      SUPER_ADMIN_EMAIL: ${{ secrets.SUPER_ADMIN_EMAIL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Install EB CLI
        run: |
          python3 -m pip install --upgrade --user awsebcli
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Initialize EB CLI
        run: |
          eb init test -r ${{ secrets.AWS_REGION }} -p "Node.js 22 running on 64bit Amazon Linux 2023" --keyname aws-eb

      - name: Set environment to use
        run: eb use b2-vue-env2

      - name: Deploy to Elastic Beanstalk with version check
        env:
          VERSION_LABEL: app-${{ github.run_id }}-${{ github.run_number }}
        run: |
          # Setup
          eb init test -r ${{ secrets.AWS_REGION }} -p "Node.js 22 running on 64bit Amazon Linux 2023" --keyname aws-eb
          eb use b2-vue-env2
      
          # Zip & Upload the version manually
          ZIP_NAME="${VERSION_LABEL}.zip"
          echo "Creating archive: $ZIP_NAME"
          zip -r $ZIP_NAME . -x ".git/*" "node_modules/*" "*.zip"
      
          echo "Creating new application version: $VERSION_LABEL"
          aws elasticbeanstalk create-application-version \
            --application-name test \
            --version-label "$VERSION_LABEL" \
            --source-bundle S3Bucket=elasticbeanstalk-${{ secrets.AWS_REGION }}-${{ secrets.AWS_ACCOUNT_ID }},S3Key=test/$ZIP_NAME \
            --auto-create-application
      
          # Wait for the version to be available
          echo "Waiting for Elastic Beanstalk to recognize version..."
          for i in {1..15}; do
            FOUND=$(aws elasticbeanstalk describe-application-versions \
              --application-name test \
              --version-labels "$VERSION_LABEL" \
              --query 'ApplicationVersions[0].VersionLabel' \
              --output text)
      
            if [[ "$FOUND" == "$VERSION_LABEL" ]]; then
              echo "Version $VERSION_LABEL is ready."
              break
            else
              echo "Waiting for version $VERSION_LABEL to register... ($i/15)"
              sleep 5
            fi
          done
      
          if [[ "$FOUND" != "$VERSION_LABEL" ]]; then
            echo "ERROR: Version $VERSION_LABEL was not registered in time."
            exit 1
          fi
      
          # Deploy the version
          echo "Deploying $VERSION_LABEL"
          eb deploy --label "$VERSION_LABEL" --verbose
      
